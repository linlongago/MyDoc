GitHub 笔记
将本地的文件都还原到最新
git reset HEAD
这样的话，我们就可以回到开始了。但这个操作好像仅限于在master之类的分支上，如果是在 
一个新的远程分支，就会出现： 
Unstaged changes after reset 
解决方法
git add .//自动把你当前目录所有修改过的文件添加到暂缓区
git reset --hard

GitHub 学习笔记(Git Shell)

创建一个仓库 :
mkdir <filename> 			//创建一个文件件
cd <filename> 				//进入文件夹
git init					//将文件夹初始化成GIT可以管理的仓库

添加文件到GIT仓库
git add <file> 				//注意，文件名要写全，包括扩展名（不包括删除）
git add -A 					//添加所有文件，修改，删除，添加 stages All
git add . 		  			// stages new and modified, without deleted
git add -u 					//stages modified and deleted, without new 

git commit -m "<日志>"		//提交到版本区
git status 					//查看当前git的状态
git diff <file>				//对比查看文件修改内柔
git reset --hard <commit_id>//还原到指定的版本 同时清除了暂缓区的内容
git log						//查看提交历史 以便要回滚到那个版本
git log -p					//查看提交历史并查看修改内容 集成了diff
git reflog					//查看命令历史 以便确定要回到未来的哪个版本
git checkout -- <file>		//撤销工作区的修改消息
git rm <file>					//删除文件 工作区删除了文件 利用这个命令将删除操作记录暂缓区 再commit到仓库
rm <firle>						//删除工作区的文件
git remote add origin git@server-name:path/repo-name.git	//关联一个远程库 可以直接替换成github网站上面的地址
git push -u origin master 	//第一次推送master分支的所有内容
git push origin master 		//推送最新修改
git clone git@github.com:michaelliao/gitskills.git	//从github上面克隆下来自己的仓库 注意名字根据自己定义
git branch	//查看分支
git branch <name>	//创建分支
git checkout <name>		//切换分支
git checkout -b <name>	//创建+切换分支
git merge <name>	//合并某分支到当前分支
git branch -d <name>	//删除分支
git fetch	//获取远程服务器最新版本
git pull	//同步本地数据
git stash 	//把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash list //查看当前存储的工作现场列表
git stash apply//恢复工作现场 但是stash不能删除
git stash drop	//删除stash
git stash pop	//上面两个功能合并

git remote -v	//查看远程库信息
本地新建的分支如果不推送到远程，对其他人就是不可见的
git push origin branchName //从本地推送分支，如果推送失败， 先用git pull抓取远程的新提交
git checkout -b branchName origin/branchName //在本地创建和远程分支对应的分支， 本地和远程分支的名称最好一致
git branch --set-upstream branchName origin/branchName  //建立本地分支和远程分支的关联
git pull 	//从远程抓取分支， 如果有冲突，先处理冲突

git 忽略文件 在根目录下创建一个特殊的 .gitignore文件
GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore
忽略文件的原则是：

忽略操作系统自动生成的文件，比如缩略图等；
忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。




